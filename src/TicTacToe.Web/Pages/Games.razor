@page "/Games"

@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using TicTacToe.Web.Components
@using TicTacToe.Web.Contracts
@using TicTacToe.Web.Helpers
@using TicTacToe.Web.Services

@inject HttpClient Http
@inject GameHubService GameHub
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject IJSRuntime Js

<PageTitle>Games</PageTitle>

<div class="row">
    <div class="col-12">

        <div class="row">
            <!-- Left Column: Game Creation Form -->
            <div class="col-12 col-md-6 mb-3 mb-md-0">
                <div class="game-card shadow-sm p-4">
                    <h4 class="mb-3">Create a New Game</h4>
                    <EditForm Model="this" OnValidSubmit="CreateGame">
                        <DataAnnotationsValidator/>
                        <div class="mb-3">
                            <InputText id="PlayerName" class="form-control" placeholder="Enter a game name..."
                                       @bind-Value="NewGameName"/>
                            <ValidationMessage For="@(() => NewGameName)" class="text-danger mt-1"/>
                        </div>
                        <button class="btn btn-primary w-100">Create New Game</button>
                    </EditForm>
                </div>
            </div>

            <!-- Right Column: Game View -->
            <div class="col-12 col-md-6">
                <div class="game-card shadow-sm p-4 game-container">
                    <h4 class="mb-4">Player: @_currentPlayer?.Name</h4>

                    <div class="home-layout mb-3">
                        <GameList OnJoin="JoinClickHandler" AvailableGames="_availableGames"/>
                    </div>

                    <hr/>
                    <button class="btn btn-outline-secondary" onclick="toggleTheme()">Toggle Theme</button>
                </div>
            </div>
        </div>

        @if (_currentGame != null)
        {
            <div class="row">
                <div class="col-12">
                    <div class="mb-4">
                        <Board Game="@_currentGame" Player="_currentPlayer" PlayerType="_playerType" @ref="_boardRef"/>
                        @* OnGameOver="() => _currentGame = null" *@
                    </div>
                </div>
            </div>
        }
    </div>
</div>


@code {

    [Required(ErrorMessage = "Please enter game name!")]
    public string NewGameName { get; set; } = string.Empty;

    private Board? _boardRef;

    private GameInfo? _currentGame;
    private PlayerInfo? _currentPlayer;
    private PlayerTypes _playerType;

    private List<GameInfo> _availableGames = [];

    protected override async Task OnInitializedAsync()
    {
        await InitializeCurrentPlayer();

        await LoadAvailableGames();

        await GameHub.SetupConnection();

        GameHub.OnGameCreated(async (gameId, gameName) =>
        {
            _availableGames.Add(new GameInfo(gameId, gameName));
            await InvokeAsync(StateHasChanged);
        });

        GameHub.OnPlayerJoined(async (gameId, playerId, playerType) =>
        {
            Console.WriteLine(playerType);
            Console.WriteLine(playerType == "X");
            if (playerId == _currentPlayer!.Id)
            {
                _currentGame = _availableGames.SingleOrDefault(g => g.Id == gameId);
                _playerType = playerType == "X" ? PlayerTypes.X : PlayerTypes.O;
                await InvokeAsync(StateHasChanged);
            }
        });
    }

    private async Task LoadAvailableGames()
    {
        var response = await Http.GetFromJsonAsync<IEnumerable<GameInfo>>("/games/available");

        if (response is not null)
        {
            _availableGames = response.ToList();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task InitializeCurrentPlayer()
    {
        _currentPlayer = await LocalStorage.GetItemAsync<PlayerInfo>(LocalStorageConstants.PlayerStorageKey);

        if (_currentPlayer is null)
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task JoinClickHandler(GameInfo game)
    {
        try
        {
            _boardRef?.ClearBoard();
            await GameHub.JoinGame(game.Id, _currentPlayer!.Id);
            _currentGame = game;
        }
        catch
        {
            await Js.InvokeVoidAsync("showBootstrapAlert", "Game is full");
        }
    }

    private async Task CreateGame()
    {
        if (string.IsNullOrWhiteSpace(NewGameName))
        {
            return;
        }

        var response = await Http.PostAsJsonAsync("/games", new { suggestedName = NewGameName });

        if (response.IsSuccessStatusCode)
        {
            await response.Content.ReadFromJsonAsync<Guid>();
            NewGameName = string.Empty;
        }
    }

}
