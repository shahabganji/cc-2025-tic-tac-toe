@page "/"
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using TicTacToe.Web.Contracts
@using TicTacToe.Web.Helpers

<EditForm Model="this" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit"
          EditContext="_editContext">
    <DataAnnotationsValidator/>

    <div class="container d-flex justify-content-center align-items-center vh-100">
        <div class="card player-card">
            <div class="mb-4">
                <label for="PlayerName" class="form-label">Enter your name:</label>
                <InputText id="PlayerName" class="form-control player-input" @bind-Value="PlayerName" @ref="_inputRef"/>
                <ValidationMessage For="@(() => PlayerName)"/>
            </div>

            <button type="submit" class="btn register-button w-100">Enter Games</button>
        </div>
    </div>
</EditForm>

@code {

    [Required(ErrorMessage = "Please enter your name.")]
    public string PlayerName { get; set; } = string.Empty;

    private InputText? _inputRef;

    [Inject] private NavigationManager Navigation { get; set; } = null!;
    [Inject] private HttpClient Http { get; set; } = null!;
    [Inject] private ILocalStorageService LocalStorage { get; set; } = null!;

    private readonly EditContext _editContext = null!;
    private readonly ValidationMessageStore? _messageStore = null!;


    protected override async Task OnInitializedAsync()
    {
        var isPlayerAlreadyRegistered = await LocalStorage.ContainKeyAsync(LocalStorageConstants.PlayerStorageKey);

        if (isPlayerAlreadyRegistered)
        {
            Navigation.NavigateTo("/Games");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (_inputRef!.Element.HasValue)
                await _inputRef.Element.Value.FocusAsync();
        }
    }

    private async Task HandleInvalidSubmit()
    {
        await _inputRef!.Element!.Value.FocusAsync();
    }

    private async Task HandleValidSubmit()
    {
        var response = await Http.PostAsJsonAsync("/player/register", new
        {
            Name = PlayerName
        });

        if (response.IsSuccessStatusCode)
        {
            var playerId = await response.Content.ReadFromJsonAsync<Guid>();
            var player = new PlayerInfo(playerId, PlayerName);
            await LocalStorage.SetItemAsync(LocalStorageConstants.PlayerStorageKey, player);
            Navigation.NavigateTo("/Games");
        }
        else
        {
            // Add an error message and notify UI
            _messageStore?.Add(() => PlayerName, "Failed to register. Please try a different name.");
            _editContext.NotifyValidationStateChanged();
            await _inputRef!.Element!.Value.FocusAsync();
        }
    }

}
