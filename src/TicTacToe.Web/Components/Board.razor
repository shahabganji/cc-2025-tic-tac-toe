@using TicTacToe.Web.Contracts
@using TicTacToe.Web.Services
@inject HttpClient Http
@inject ConfettiService Confetti
@inject GameHubService GameHub

<div class="board-wrapper">

    <div class="text-info">@Game!.Name - You are: @PlayerType</div>
    <hr/>
    @if (_winningCombo.Count == 3)
    {
        <div class="text-info">You @(_isLoser ? "Lost" : "Won")</div>
    }
    <hr/>

    <div class="board @(_isLoser ? "lose" : "")">
        @for (var i = 0; i < 9; i++)
        {
            var localIndex = i;
            <Cell Value="@_boardCells[i]" OnClick="async () => { await CellClickHandler(localIndex); }"
                  IsWinner="@_winningCombo.Contains(i)"/>
        }
    </div>
</div>

@code {
    protected override Task OnInitializedAsync()
    {
        GameHub.OnCellFilled(async (gameId, playerId, cell) =>
        {
            if (playerId == Player!.Id)
            {
                _boardCells[cell] = PlayerType.ToString();
            }
            else
            {
                _boardCells[cell] = (PlayerType == PlayerTypes.X ? PlayerTypes.O : PlayerTypes.X).ToString();
            }

            await InvokeAsync(StateHasChanged);

            EvaluateGame();

            await RenderResult();
        });

        return base.OnInitializedAsync();
    }

    private async Task RenderResult()
    {
        if (_winningCombo.Count == 3)
        {
            if (IsDraw)
                return;

            if (_winner == PlayerType)
            {
                _isLoser = false;
                await Confetti.CelebrateWinner();
            }
            else
            {
                _isLoser = true;
                await InvokeAsync(StateHasChanged);
                // await Confetti.InformLoser();
            }
        }
    }

    [Parameter] public GameInfo? Game { get; set; }
    [Parameter] public PlayerInfo? Player { get; set; }
    [Parameter] public PlayerTypes PlayerType { get; set; }

    private HashSet<int> _winningCombo = [];
    private string[] _boardCells = new string[9];

    private bool _isLoser;
    private PlayerTypes? _winner;
    private bool IsDraw => _boardCells.All(c => !string.IsNullOrEmpty(c)) && _winner == null;

    private async Task CellClickHandler(int cell)
    {
        await Http.PostAsJsonAsync($"/game/{Game!.Id}/play/cell", new
        {
            GameId = Game.Id,
            PlayerId = Player!.Id,
            Cell = cell
        });
    }

    public void ClearBoard()
    {
        _winningCombo = [];
        _boardCells = new string[9];
        _isLoser = false;
        _winner = null;
    }
    
    private void EvaluateGame()
    {
        int[][] wins =
        [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],
            [0, 3, 6], [1, 4, 7], [2, 5, 8],
            [0, 4, 8], [2, 4, 6]
        ];

        foreach (var combo in wins)
        {
            var (a, b, c) = (combo[0], combo[1], combo[2]);
            if (string.IsNullOrEmpty(_boardCells[a]) || _boardCells[a] != _boardCells[b] || _boardCells[b] != _boardCells[c])
                continue;

            _winner = _boardCells[a] == "X" ? PlayerTypes.X : PlayerTypes.O;
            _winningCombo = combo.ToHashSet();
            return;
        }
    }

}
